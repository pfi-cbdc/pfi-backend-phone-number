// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(uuid())
  phoneNumber String    @unique
  verified    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  tokens      Token[]
  companies   Company[]
  products    Product[]
  purchases   Purchase[]
}

model Token {
  id        String   @id @default(uuid())
  token     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Company {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  companyName      String
  gstin            String
  brandName        String
  email            String
  pan              String
  alternateContact String?
  website          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  purchases        Purchase[]
}

model Product {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  productName      String
  units            String
  sellingPrice     Int
  description      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  purchases        Purchase[]
}

enum PurchaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Purchase {
  id          String   @id @default(uuid())
  companyId   String
  productId   String
  quantity    Int
  price       Float
  status      PurchaseStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  company     Company  @relation(fields: [companyId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  vendorId    String   // ID of the vendor (seller)
  isVendorAccepted Boolean @default(false)
}
